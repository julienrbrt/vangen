package main

import (
	"fmt"
	"html/template"
	"io"
)

func generate_index(w io.Writer, domain string, r []repository) error {
	const html = `<!DOCTYPE html>
<html>
<head>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>{{.Domain}} Go Modules</title>
<style>
* { font-family: sans-serif; }
body { margin: 16px; background-color: #f4f4f4; }
.content {
  max-width: 600px;
  margin: 0 auto;
  background-color: #fff;
  border-radius: 4px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
  padding: 16px;
}
code {
  display: block;
  font-family: monospace;
  font-size: 1em;
  background-color: #eee;
  padding: 1em;
  margin-bottom: 16px;
}
ul { margin-top: 16px; margin-bottom: 16px; }
@media (max-width: 600px) {
  .content {
    max-width: 100%;
    margin: 0 8px;
    box-shadow: none;
  }
}
</style>
</head>
<body>
<div class="content">

<h2>{{.Domain}} Go Modules</h2>

{{ if .MainRepositories }}
<h3>Tools:</h3>
{{ end }}

<ul>
{{range $_, $r := .MainRepositories -}}
<li>
<a href="/{{$r.Prefix}}">{{$r.Prefix}}</a>
{{if .Subs -}}<ul>{{end -}}
{{range $_, $s := .Subs -}}{{if not $s.Hidden -}}<li><a href="/{{$r.Prefix}}/{{$s.Name}}">{{$s.Name}}</a></li>{{end -}}{{end -}}
{{if .Subs -}}</ul>{{end -}}
</li>
{{end -}}
</ul>

<h3>Libraries:</h3>

<ul>
{{range $_, $r := .PackageRepositories -}}{{if not $r.Hidden -}}
<li>
<a href="/{{$r.Prefix}}">{{$r.Prefix}}</a>
{{if .Subs -}}<ul>{{end -}}
{{range $_, $s := .Subs -}}{{if not $s.Hidden -}}<li><a href="/{{$r.Prefix}}/{{$s.Name}}">{{$s.Name}}</a></li>{{end -}}{{end -}}
{{if .Subs -}}</ul>{{end -}}
</li>
{{end }}{{end -}}
</ul>

<hr/>

Generated by <a href="https://github.com/julienrbrt/vangen">vangen</a>.

</div>
</body>
</html>`

	tmpl, err := template.New("").Parse(html)
	if err != nil {
		return fmt.Errorf("error loading template: %v", err)
	}

	mainRepositories := []repository{}
	packageRepositories := []repository{}
	for _, r := range r {
		if r.Main {
			mainRepositories = append(mainRepositories, r)
		} else {
			packageRepositories = append(packageRepositories, r)
		}
	}

	data := struct {
		Domain              string
		MainRepositories    []repository
		PackageRepositories []repository
	}{
		Domain:              domain,
		MainRepositories:    mainRepositories,
		PackageRepositories: packageRepositories,
	}

	err = tmpl.ExecuteTemplate(w, "", data)
	if err != nil {
		return fmt.Errorf("generating template: %v", err)
	}

	return nil
}
